package avroProducer;


import CoreProject.JsonLoader;
import org.apache.kafka.clients.producer.Callback;
import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.clients.producer.RecordMetadata;
import schema.User;

import java.util.LinkedHashMap;
import java.util.Properties;

/***
 * a Producer to produce avro messages
 */
public class KafkaAvroProducer {
    public static void main(String[] args){
        //call the properties configuration
        PropConfig propConfig = new PropConfig();
        //property file
        Properties props = new Properties();
        propConfig.setProperties(props);
        //the message id (key)
        Integer id = 0;


        //read the topic from the console
        if (args.length != 1) {
            System.err.println("Please specify 1 parameters ");
            System.exit(-1);
        }
        String topicName = args[0];


        //A kafka Producer that take User as an argument (which is generated by avro)
        KafkaProducer<String, User> kafkaProducer=new KafkaProducer<String,User>(props);
        //the user map
        LinkedHashMap<String,Integer> users =  JsonLoader.LoadJson("C:\\Users\\ghailenes\\Desktop\\exercice\\liste_noms_age.json");

        //looping the map and sending data
        for(String key : users.keySet()){
            User user = User.newBuilder().setName(key).setAge(users.get(key)).build();
            ProducerRecord<String,User> rec = new ProducerRecord<String,User>(topicName,id.toString(),user);
            //async send
            kafkaProducer.send(rec, new Callback() {
                @Override
                public void onCompletion(RecordMetadata recordMetadata, Exception e) {
                    if(e ==null){
                        System.out.println("Success !");
                        System.out.println(recordMetadata.toString());
                    }else{
                        e.printStackTrace();
                    }
                }
            });
            id++;
        }


        //flush Producer
        kafkaProducer.flush();
        //close Producer
        kafkaProducer.close();
    }
}
